import subprocess
import sys
import re

class Color:
    # Regular Colors
    BLACK = '\033[30m'
    RED = '\033[31m'
    GREEN = '\033[32m'
    YELLOW = '\033[33m'
    BLUE = '\033[34m'
    MAGENTA = '\033[35m'
    CYAN = '\033[36m'
    WHITE = '\033[37m'
    ORANGE = '\033[33m'
    # Bright Colors
    BRIGHT_BLACK = '\033[90m'
    BRIGHT_RED = '\033[91m'
    BRIGHT_GREEN = '\033[92m'
    BRIGHT_YELLOW = '\033[93m'
    BRIGHT_BLUE = '\033[94m'
    BRIGHT_MAGENTA = '\033[95m'
    BRIGHT_CYAN = '\033[96m'
    BRIGHT_WHITE = '\033[97m'
    
    # Background Colors
    BG_BLACK = '\033[40m'
    BG_RED = '\033[41m'
    BG_GREEN = '\033[42m'
    BG_YELLOW = '\033[43m'
    BG_BLUE = '\033[44m'
    BG_MAGENTA = '\033[45m'
    BG_CYAN = '\033[46m'
    BG_WHITE = '\033[47m'
    
    # Bright Background Colors
    BG_BRIGHT_BLACK = '\033[100m'
    BG_BRIGHT_RED = '\033[101m'
    BG_BRIGHT_GREEN = '\033[102m'
    BG_BRIGHT_YELLOW = '\033[103m'
    BG_BRIGHT_BLUE = '\033[104m'
    BG_BRIGHT_MAGENTA = '\033[105m'
    BG_BRIGHT_CYAN = '\033[106m'
    BG_BRIGHT_WHITE = '\033[107m'
    
    # Additional Attributes
    RESET = '\033[0m'  # Reset all attributes
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    INVERSE = '\033[7m'  # Swap foreground and background colors
    BOLD_OFF = '\033[22m'
    UNDERLINE_OFF = '\033[24m'
    INVERSE_OFF = '\033[27m'

def apply_color_to_ps_output(line):
    columns = line.split(maxsplit=10)  # Splitting by whitespace, maxsplit=10 to preserve CMD column
    if not columns or len(columns) < 8:
        return line  # Return the line unchanged if it doesn't match the expected format
    
    # Apply color based on UID
    columns[2] = f"{Color.RED if columns[2] == 'root' else Color.BLUE}{columns[2]}{Color.RESET}"
    
    # Apply color to PID (orange) and PPID (cyan)
    columns[3] = f"{Color.ORANGE}{columns[3]}{Color.RESET}"
    columns[4] = f"{Color.CYAN}{columns[4]}{Color.RESET}"
    
    # Apply color to TTY based on its value
    if columns[7] == '?':
        columns[7] = f"{Color.MAGENTA}{columns[7]}{Color.RESET}"
    elif 'tty' in columns[7]:
        columns[7] = f"{Color.YELLOW}{columns[7]}{Color.RESET}"
    else:
        columns[7] = f"{Color.GREEN}{columns[7]}{Color.RESET}"
    
    # Reassemble the line
    colored_line = ' '.join(columns)
    return colored_line

def run_and_color_ps_command(command):
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, text=True)
    stdout, stderr = process.communicate()

    colored_stdout = "\n".join(apply_color_to_ps_output(line) for line in stdout.split('\n'))
    colored_stderr = "\n".join(apply_color_to_ps_output(line) for line in stderr.split('\n'))

    print(colored_stdout)
    if stderr:
        print(colored_stderr, file=sys.stderr)

def main():
    command = "ps -elf"  # Set the command to 'ps -elf'
    run_and_color_ps_command(command)

if __name__ == "__main__":
    main()
